#pragma once

#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;

class matrixCipher
{
public:

    matrixCipher();

    vector<vector<int>> Zeroes;
    vector<vector<int>> Ones;
    vector<vector<int>> Twos;
    vector<vector<int>> Threes;
    vector<vector<int>> Fours;

    map<vector<int>, int> Coords2Num;
    /*
    int rows = 10;
    int columns = 8;

    int cipherIntegers[10][8] = { {3, 3, 2, 3, 1, 3, 2, 3},
                             {1, 4, 2, 3, 4, 0, 3, 3},
                             {2, 3, 0, 0, 1, 2, 0, 1},
                             {1, 3, 2, 0, 2, 1, 2, 2},
                             {1, 1, 3, 0, 0, 1, 2, 0},
                             {1, 1, 0, 1, 3, 1, 3, 1},
                             {4, 0, 0, 0, 1, 2, 2, 1},
                             {4, 1, 2, 1, 1, 3, 2, 0},
                             {2, 4, 0, 3, 3, 1, 2, 1},
                             {2, 1, 3, 2, 1, 2, 0, 1} };
    */
    /*
    int rows = 12;
    int columns = 8;

    int cipherIntegers[12][8] = { {3, 3, 3, 0, 3, 1, 0, 0},
                             {3, 2, 1, 0, 1, 3, 0, 3},
                             {2, 1, 0, 3, 0, 3, 0, 1},
                             {1, 2, 3, 4, 0, 2, 0, 3},
                             {0, 3, 1, 0, 0, 0, 2, 3},
                             {3, 2, 1, 2, 2, 2, 1, 2},
                             {0, 2, 3, 0, 4, 0, 2, 2},
                             {2, 3, 1, 2, 4, 2, 2, 3},
                             {3, 0, 0, 1, 0, 4, 4, 4},
                             {3, 3, 3, 1, 1, 0, 4, 4},
                             {4, 3, 4, 0, 2, 1, 3, 0},
                             {3, 2, 2, 2, 2, 0, 2, 1},};
    */

    /*
    int rows = 9;
    int columns = 8;

    int cipherIntegers[9][8] = { {2, 2, 0, 1, 0, 3, 2, 0},
                                {0, 2, 2, 1, 2, 1, 1, 0},
                                {1, 1, 3, 1, 3, 1, 2, 0},
                                {0, 2, 0, 1, 1, 2, 4, 1},
                                {2, 3, 2, 0, 0, 0, 0, 2},
                                {1, 0, 1, 4, 2, 0, 1, 2},
                                {1, 3, 3, 2, 3, 0, 2, 2},
                                {2, 2, 0, 3, 0, 0, 3, 3},
                                {1, 2, 2, 3, 3, 0, 3, 1} };
    */




    
    int rows = 32;
    int columns = 8;

    int cipherIntegers[32][8] = { {3, 3, 2, 3, 1, 3, 2, 3},
                                {1, 4, 2, 3, 4, 0, 3, 3},
                                {2, 3, 0, 0, 1, 2, 0, 1},
                                {1, 3, 2, 0, 2, 1, 2, 2},
                                {1, 1, 3, 0, 0, 1, 2, 0},
                                {1, 1, 0, 1, 3, 1, 3, 1},
                                {4, 0, 0, 0, 1, 2, 2, 1},
                                {4, 1, 2, 1, 1, 3, 2, 0},
                                {2, 4, 0, 3, 3, 1, 2, 1},
                                {2, 1, 3, 2, 1, 2, 0, 1},
                                {2, 0, 3, 3, 2, 0, 1, 1},
                                {3, 3, 3, 0, 3, 1, 0, 0},
                                {3, 2, 1, 0, 1, 3, 0, 3},
                                {2, 1, 0, 3, 0, 3, 0, 1},
                                {1, 2, 3, 4, 0, 2, 0, 3},
                                {0, 3, 1, 0, 0, 0, 2, 3},
                                {3, 2, 1, 2, 2, 2, 1, 2},
                                {0, 2, 3, 0, 4, 0, 2, 2},
                                {2, 3, 1, 2, 4, 2, 2, 3},
                                {3, 0, 0, 1, 0, 4, 4, 4},
                                {3, 3, 3, 1, 1, 0, 4, 4},
                                {4, 3, 4, 0, 2, 1, 3, 0},
                                {3, 2, 2, 2, 2, 0, 2, 1},
                                {2, 2, 0, 1, 0, 3, 2, 0},
                                {0, 2, 2, 1, 2, 1, 1, 0},
                                {1, 1, 3, 1, 3, 1, 2, 0},
                                {0, 2, 0, 1, 1, 2, 4, 1},
                                {2, 3, 2, 0, 0, 0, 0, 2},
                                {1, 0, 1, 4, 2, 0, 1, 2},
                                {1, 3, 3, 2, 3, 0, 2, 2},
                                {2, 2, 0, 3, 0, 0, 3, 3},
                                {1, 2, 2, 3, 3, 0, 3, 1} };
    
};